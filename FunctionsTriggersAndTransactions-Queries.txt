01. Employees with Salary Above 35000

CREATE PROCEDURE usp_GetEmployeesSalaryAbove35000
	   AS(
SELECT e.FirstName, e.LastName
    FROM Employees e
    WHERE e.Salary > 35000)

------------------------------------------------------------------------------
02. Employees with Salary Above Number

CREATE PROCEDURE usp_GetEmployeesSalaryAboveNumber
	   @InputSalary MONEY = 0
	AS
 BEGIN 
SELECT e.FirstName, e.LastName
  FROM Employees e
 WHERE e.Salary >= @InputSalary
   END
  
------------------------------------------------------------------------------
03. Town Names Starting With

CREATE PROC usp_GetTownsStartingWith(
	   @str VARCHAR(20))
	AS 
 BEGIN
SELECT t.Name
  FROM Towns t
 WHERE t.Name LIKE @str + '%'
   END
   
------------------------------------------------------------------------------
04. Employees from Town

CREATE PROC [dbo].[usp_GetEmployeesFromTown](
	   @TownName VARCHAR(50))
	   AS
	   BEGIN
		   SELECT e.FirstName, e.LastName
		   FROM Employees e
		   INNER JOIN Addresses a
		   ON a.AddressID = e.AddressID
		   INNER JOIN Towns t
		   ON t.TownID = a.TownID
		   WHERE t.Name = @TownName
	   END

------------------------------------------------------------------------------
05. Salary Level Function

CREATE FUNCTION ufn_GetSalaryLevel(@salary MONEY)
	   RETURNS VARCHAR(20)
	   AS BEGIN
	   RETURN
			CASE
				WHEN @salary < 30000 THEN 'Low'
				WHEN @salary BETWEEN 30000 AND 50000 THEN 'Average'
				WHEN @salary > 50000 THEN 'High'
				ELSE NULL
			END
	   END
	   
------------------------------------------------------------------------------
07. Define Function

CREATE FUNCTION ufn_IsWordComprised(@setOfLetters NVARCHAR(250), @word NVARCHAR(250))
		RETURNS BIT
		AS BEGIN
			DECLARE @count SMALLINT = 1
			DECLARE @indexChar SMALLINT = 1
			DECLARE @check BIT = 1
			DECLARE @innercheck BIT = 0
			WHILE @count <= LEN(@word)
				BEGIN
					DECLARE @lo CHAR
					SET @lo = SUBSTRING(@word, @count, 1)
						WHILE @indexChar <= LEN(@setOfLetters)
						BEGIN					
							DECLARE @lt CHAR						
							SET @lt = SUBSTRING(@setOfLetters, @indexChar, 1)
							IF UPPER(@lo) LIKE UPPER(@lt)
								BEGIN
									SET @innercheck = 1
									BREAK
								END
							ELSE
								BEGIN
									SET @indexChar += 1
								END
						END
					IF @innercheck = 1
						BEGIN
							SET @innercheck = 0
							SET @indexChar = 1
							SET @count += 1
						END
					ELSE
						BEGIN
							SET @check = 0
							BREAK
						END
					
				END

			IF @check = 1
				BEGIN
					RETURN 1
				END
			ELSE
				BEGIN
					RETURN 0
				END
			RETURN NULL
		END
		
------------------------------------------------------------------------------
09. Find Full Name

CREATE PROC usp_GetHoldersFullName
	AS
	BEGIN
		SELECT a.FirstName + ' ' + a.LastName AS [Full Name]
		FROM AccountHolders a
	END

------------------------------------------------------------------------------
10. People with Balance Higher Than

CREATE PROC usp_GetHoldersWithBalanceHigherThan(
	@number MONEY = 0)
	AS
	BEGIN
		SELECT ah.FirstName, ah.LastName
        FROM AccountHolders ah
        LEFT JOIN Accounts a
        ON ah.Id = a.AccountHolderID
        GROUP BY ah.FirstName, ah.LastName
        HAVING SUM(a.Balance) > @number
	END
	
------------------------------------------------------------------------------
11. Future Value Function

CREATE FUNCTION ufn_CalculateFutureValue(@I MONEY, @R FLOAT, @T INT)
	RETURNS MONEY
	AS BEGIN
		RETURN @I * (POWER((1 + @R), @T))
	END
	
------------------------------------------------------------------------------
13. Deposit Money Procedure

CREATE PROC usp_DepositMoney(@AccountId INT, @moneyAmount MONEY)
	   AS
	   BEGIN
			DECLARE @temp MONEY = (SELECT a.Balance FROM dbo.Accounts a WHERE a.Id = @AccountId)

			BEGIN TRAN
				IF(@temp IS NULL)
				BEGIN
					ROLLBACK
				END
				ELSE
				BEGIN
					UPDATE dbo.Accounts
					SET Balance += @moneyAmount
					WHERE Id = @AccountId
					COMMIT
				END
	   END
	   
------------------------------------------------------------------------------
14. Withdraw Money Procedure

CREATE PROC usp_WithdrawMoney(@AccountId INT, @moneyAmount MONEY)
	   AS
	   BEGIN
			DECLARE @temp MONEY = (SELECT a.Balance FROM dbo.Accounts a WHERE a.Id = @AccountId)

			BEGIN TRAN
				IF(@temp < @moneyAmount)
				BEGIN
					ROLLBACK
				END
				ELSE
				BEGIN
					UPDATE dbo.Accounts
					SET Balance -= @moneyAmount
					WHERE Id = @AccountId
					COMMIT
				END
	   END
	   
------------------------------------------------------------------------------
18. Cash in User Games Odd Rows

CREATE FUNCTION ufn_CashInUsersGames(@GameName VARCHAR(MAX))
	RETURNS @TEMP TABLE(SumCash MONEY)
	AS BEGIN
			DECLARE @MyTABLE TABLE (SumCash MONEY)
			INSERT INTO @MyTABLE
			SELECT SUM(OddRowsTable.Cash) FROM
					(SELECT *, ROW_NUMBER() OVER(ORDER BY Cash DESC) AS r FROM
					(SELECT g.Name, ug.Cash, u.Username
						FROM Games g
						INNER JOIN UsersGames ug
						ON ug.GameId = g.Id
						INNER JOIN Users u
						ON u.Id = ug.UserId
						WHERE g.Name = @GameName) AS t) AS OddRowsTable
						WHERE OddRowsTable.r % 2 = 1
			INSERT INTO @TEMP
			SELECT SumCash FROM @MyTABLE
			RETURN
	END
	
------------------------------------------------------------------------------
20. Massive Shopping

Select ttt.Name from
(SELECT table1.Id as [Item], table2.Id as [Game], table1.Name
  FROM (SELECT [Id]
		,[Name]
		,[StatisticId]
		,[Price]
		,[MinLevel]
		FROM [dbo].[Items] i
		WHERE i.MinLevel IN (11,12)) AS table1
  CROSS JOIN (SELECT TOP 1000 [Id]
  FROM [dbo].[UsersGames]
  WHERE UserId = 9
  AND GameId = 87) AS table2
UNION ALL
SELECT [ItemId]
      ,[UserGameId], i.Name
  FROM [dbo].[UserGameItems] ugi
  INNER JOIN dbo.Items i
  ON i.Id = ugi.ItemId
  WHERE UserGameId = 110) as ttt
  order by ttt.Name
  
------------------------------------------------------------------------------
21. Number of Users for Email Provider

SELECT tbl.[Email Provider], COUNT(tbl.[Email Provider]) AS [Number Of Users]
  FROM(
  SELECT SUBSTRING(u.Email, CHARINDEX('@', u.Email) + 1, LEN(u.Email)) AS [Email Provider]
  FROM Users u) AS tbl
  GROUP BY tbl.[Email Provider]
  ORDER BY [Number Of Users] DESC, tbl.[Email Provider]

------------------------------------------------------------------------------
22. All Users in Games

SELECT  g.Name, gt.Name, u.Username, ug.Level, ug.Cash, ch.Name
    FROM dbo.Users u
	LEFT JOIN dbo.UsersGames ug
	ON u.Id = ug.UserId
	INNER JOIN dbo.Games g
	ON g.Id = ug.GameId
	INNER JOIN dbo.GameTypes gt
	ON gt.Id = g.GameTypeId
	LEFT JOIN dbo.Characters ch
	ON ch.Id = ug.CharacterId
	ORDER BY Level DESC, Username, g.Name

------------------------------------------------------------------------------
23. Users in Games with Their Items

SELECT *
  FROM(
	SELECT  u.Username, g.Name, COUNT(i.Name) AS [Items Count], SUM(i.Price) AS [Items Price]
		FROM dbo.Users u
		LEFT JOIN dbo.UsersGames ug
		ON u.Id = ug.UserId
		LEFT JOIN dbo.Games g
		ON g.Id = ug.GameId
		LEFT JOIN dbo.UserGameItems ugi
		ON ugi.UserGameId = ug.Id
		LEFT JOIN dbo.Items i
		ON i.Id = ugi.ItemId
		GROUP BY u.Username, g.Name) AS tbl
  WHERE tbl.[Items Count] >= 10
  ORDER BY [Items Count] DESC, [Items Price] DESC, Username

------------------------------------------------------------------------------
24. * User in Games with Their Statistics

SELECT u.Username,
	   g.Name AS [Game],
	   MAX(ch.Name) AS [Character],
	   SUM(ist.Strength) + MAX(st.Strength) + MAX(chst.Strength) AS [Strength],
	   SUM(ist.Defence) + MAX(st.Defence) + MAX(chst.Defence) AS [Defence],
	   SUM(ist.Speed) + MAX(st.Speed) + MAX(chst.Speed) AS [Speed],
	   SUM(ist.Mind) + MAX(st.Mind) + MAX(chst.Mind) AS [Mind],
	   SUM(ist.Luck) + MAX(st.Luck) + MAX(chst.Luck) AS [Luck]
	FROM dbo.Users u
	INNER JOIN dbo.UsersGames ug
	ON u.Id = ug.UserId
	INNER JOIN dbo.Games g
	ON ug.GameId = g.Id
	INNER JOIN dbo.GameTypes gt
	ON gt.Id = g.GameTypeId
	INNER JOIN dbo.[Statistics] st
	ON gt.BonusStatsId = st.Id
	INNER JOIN dbo.Characters ch
	ON ug.CharacterId = ch.Id
	INNER JOIN dbo.[Statistics] chst
	ON ch.StatisticId = chst.Id
	INNER JOIN dbo.UserGameItems ugi
	ON ugi.UserGameId = ug.Id
	INNER JOIN dbo.Items i
	ON ugi.ItemId = i.Id
	INNER JOIN dbo.[Statistics] ist
	ON i.StatisticId = ist.Id
	GROUP BY u.Username, g.Name
	ORDER BY Strength DESC, Defence DESC, Speed DESC, Mind DESC, Luck DESC

------------------------------------------------------------------------------
25. All Items with Greater than Average Statistics

	SELECT i.Name, i.Price, i.MinLevel, stats.Strength, stats.Defence, stats.Speed, stats.Luck, stats.Mind
		FROM dbo.Items i
		LEFT JOIN dbo.ItemTypes it
		ON it.Id = i.ItemTypeId
		LEFT JOIN dbo.[Statistics] stats
		ON i.StatisticId = stats.Id
		WHERE stats.Mind > ALL(SELECT AVG(stats.Mind) AS [Mind]
								FROM dbo.Items i
								LEFT JOIN dbo.ItemTypes it
								ON it.Id = i.ItemTypeId
								LEFT JOIN dbo.[Statistics] stats
								ON i.StatisticId = stats.Id)
		AND stats.Luck > ALL(SELECT AVG(stats.Luck) AS [Luck]
								FROM dbo.Items i
								LEFT JOIN dbo.ItemTypes it
								ON it.Id = i.ItemTypeId
								LEFT JOIN dbo.[Statistics] stats
								ON i.StatisticId = stats.Id)
		AND stats.Speed > ALL(SELECT AVG(stats.Speed) AS [Speed]
								FROM dbo.Items i
								LEFT JOIN dbo.ItemTypes it
								ON it.Id = i.ItemTypeId
								LEFT JOIN dbo.[Statistics] stats
								ON i.StatisticId = stats.Id)
		ORDER BY I.Name

------------------------------------------------------------------------------
26. Display All Items about Forbidden Game Type

SELECT i.Name, i.Price, i.MinLevel, gt.Name
	FROM dbo.Items i
	FULL JOIN dbo.GameTypeForbiddenItems gtfi
	ON i.Id = gtfi.ItemId
	Full JOIN dbo.GameTypes gt
	ON gt.Id = gtfi.GameTypeId
	ORDER BY gt.Name DESC, i.Name

------------------------------------------------------------------------------
27. Buy Items for User in Game

INSERT INTO dbo.UserGameItems(ItemId, UserGameId)
VALUES (51, 235), (71, 235), (157, 235), (184, 235), (197, 235), (223, 235)
UPDATE dbo.UsersGames
SET Cash -= 2957
WHERE UserId = 5 AND GameId = 221
  
SELECT u.Username, g.Name, ug.Cash, i.Name
    FROM dbo.Users u
	LEFT JOIN dbo.UsersGames ug
	ON ug.UserId = u.Id
	INNER JOIN dbo.Games g
	ON g.Id = ug.GameId
	INNER JOIN dbo.UserGameItems ugi
	ON ugi.UserGameId = ug.Id
	INNER JOIN dbo.Items i
	ON i.Id = ugi.ItemId
	WHERE ug.GameId = 221
	ORDER BY i.Name

------------------------------------------------------------------------------
28. Peaks and Mountains

SELECT p.PeakName, m.MountainRange, p.Elevation
    FROM Mountains m
	INNER JOIN Peaks p
	ON p.MountainId = m.Id
	ORDER BY p.Elevation DESC, p.PeakName

------------------------------------------------------------------------------
29. Peaks with Mountain, Country and Continent

SELECT p.PeakName, m.MountainRange, c.CountryName, co.ContinentName
	FROM Countries c
	INNER JOIN MountainsCountries mc
	ON mc.CountryCode = c.CountryCode
	INNER JOIN Mountains m
	ON m.Id = mc.MountainId
	INNER JOIN Peaks p
	ON p.MountainId = m.Id
	INNER JOIN Continents co
	ON co.ContinentCode = c.ContinentCode
	ORDER BY p.PeakName, c.CountryName

------------------------------------------------------------------------------
30. Rivers by Country

SELECT finalTable.CountryName,
	finalTable.ContinentName,
	finalTable.RiversCount,
	CASE
		WHEN finalTable.TotalLength IS NULL THEN 0
		ELSE finalTable.TotalLength
	END AS [TotalLength]
    FROM(
		SELECT 
		t.CountryName
		,t.ContinentName
		,COUNT(t.Id) AS [RiversCount]
		,SUM(t.Length) AS [TotalLength]
    FROM(
		SELECT c.CountryName, co.ContinentName, r.Id, r.Length
			FROM Countries c
			LEFT JOIN CountriesRivers cr
			ON cr.CountryCode = c.CountryCode
			LEFT JOIN Rivers r
			ON r.Id = cr.RiverId
			LEFT JOIN Continents co
			ON co.ContinentCode = c.ContinentCode) AS t
    GROUP BY t.CountryName, t.ContinentName) AS finalTable
	ORDER BY finalTable.RiversCount DESC, finalTable.TotalLength DESC, finalTable.CountryName

------------------------------------------------------------------------------
30. Rivers by Country

SELECT c.CountryName
		,co.ContinentName
		,COUNT(r.Id) AS [RiversCount]
		,CASE
			WHEN SUM(r.Length) IS NULL THEN 0
			ELSE SUM(r.Length)
		END AS [TotalLength]
	FROM dbo.Countries c
	LEFT JOIN dbo.CountriesRivers cr
	ON c.CountryCode = cr.CountryCode
	LEFT JOIN dbo.Rivers r
	ON cr.RiverId = r.Id
	INNER JOIN dbo.Continents co
	ON c.ContinentCode = co.ContinentCode
	GROUP BY c.CountryCode, c.CountryName, co.ContinentCode, co.ContinentName
	ORDER BY [RiversCount] DESC, [TotalLength] DESC, c.[CountryName]

------------------------------------------------------------------------------
31. Count of Countries by Currency

SELECT cu.CurrencyCode, cu.[Description] AS [Currency], COUNT(c.CountryName) AS [NumberOfCountries]
    FROM dbo.Currencies cu
	LEFT JOIN dbo.Countries c
	ON c.CurrencyCode = cu.CurrencyCode
	GROUP BY cu.CurrencyCode, cu.[Description]
	ORDER BY [NumberOfCountries] DESC, cu.[Description]

------------------------------------------------------------------------------
32. Population and Area by Continent

SELECT co.ContinentName, SUM(CONVERT(BIGINT,c.AreaInSqKm)) AS [CountriesArea], SUM(CONVERT(BIGINT, c.[Population])) AS [CountriesPopulation]
    FROM dbo.Continents co
	INNER JOIN dbo.Countries c
	ON c.ContinentCode = co.ContinentCode
	GROUP BY co.ContinentName
	ORDER BY [CountriesPopulation] DESC

------------------------------------------------------------------------------
33. Monasteries by Country

CREATE TABLE Monasteries(
	Id INT IDENTITY(1,1) PRIMARY KEY,
	[Name] VARCHAR(MAX),
	CountryCode CHAR(2)

	CONSTRAINT FK_Monasteries_Countries FOREIGN KEY(CountryCode) REFERENCES Countries(CountryCode)
)
  
INSERT INTO Monasteries(Name, CountryCode) VALUES
('Rila Monastery “St. Ivan of Rila”', 'BG'), 
('Bachkovo Monastery “Virgin Mary”', 'BG'),
('Troyan Monastery “Holy Mother''s Assumption”', 'BG'),
('Kopan Monastery', 'NP'),
('Thrangu Tashi Yangtse Monastery', 'NP'),
('Shechen Tennyi Dargyeling Monastery', 'NP'),
('Benchen Monastery', 'NP'),
('Southern Shaolin Monastery', 'CN'),
('Dabei Monastery', 'CN'),
('Wa Sau Toi', 'CN'),
('Lhunshigyia Monastery', 'CN'),
('Rakya Monastery', 'CN'),
('Monasteries of Meteora', 'GR'),
('The Holy Monastery of Stavronikita', 'GR'),
('Taung Kalat Monastery', 'MM'),
('Pa-Auk Forest Monastery', 'MM'),
('Taktsang Palphug Monastery', 'BT'),
('Sümela Monastery', 'TR')

UPDATE dbo.Countries
SET IsDeleted = 1
WHERE CountryName IN (SELECT c.CountryName
				FROM dbo.Countries c
				LEFT JOIN dbo.CountriesRivers cr
				ON cr.CountryCode = c.CountryCode
				INNER JOIN dbo.Rivers r
				ON r.Id = cr.RiverId
				GROUP BY c.CountryName
				HAVING COUNT(r.RiverName) > 3)

SELECT m.Name, c.CountryName
    FROM dbo.Countries c
	JOIN dbo.Monasteries m
	ON m.CountryCode = c.CountryCode
	WHERE c.IsDeleted = 0
	ORDER BY m.Name

------------------------------------------------------------------------------
34. Monasteries by Continents and Countries

UPDATE dbo.Countries
SET CountryName = 'Burma'
WHERE CountryName = 'Myanmar'

INSERT INTO dbo.Monasteries(Name, CountryCode)
VALUES('Hanga Abbey', 'TZ')


SELECT co.ContinentName
	   ,c.CountryName
	   ,COUNT(m.Name) AS [MonasteriesCount]			
    FROM dbo.Continents co
	LEFT JOIN dbo.Countries c
	ON c.ContinentCode = co.ContinentCode
	LEFT JOIN dbo.Monasteries m
	ON c.CountryCode = m.CountryCode
	WHERE c.IsDeleted = 0
	GROUP BY c.CountryName, co.ContinentName
	ORDER BY [MonasteriesCount] DESC, c.CountryName

------------------------------------------------------------------------------
